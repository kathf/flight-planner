//= require jquery
//= require jquery_ujs
//= require bootstrap
//= require_tree .


// send user's location to controller and calculate closest airport and set as @ways.origin
var setLocation = function () {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var cookie_val = position.coords.latitude + "|" + position.coords.longitude;
      document.cookie = "lat_lng=" + escape(cookie_val);
    });
  };
  console.log("location set");
}

// initialize google map and call function to create marker for origin airport (closest to user's location)
function initializeMap() {
  console.log("initializing map");
  var myStyles = [
    {
      featureType: "water",
      elementType: "all",
      stylers: [
        { hue: "#009999" },
        { lightness: 0 }
      ]
    },{
      featureType: "landscape",
      elementType: "all",
      stylers: [
        { lightness: -100 }
      ]
    },{
      featureType: "all",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    },{
      featureType: "administrative",
      elementType: "geometry.fill",
      stylers: [
         { visibility: "off" }
      ]
    }
  ];

  var myOptions = {
    center: new google.maps.LatLng(39, 9),
    zoom: 2,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    minZoom: 1,
    maxZoom: 6,
    mapTypeControl: false,
    streetViewControl: false,
    panControl: false,
    zoomControl: true,
    zoomControlOptions: {
        style: google.maps.ZoomControlStyle.SMALL,
        position: google.maps.ControlPosition.LEFT_BOTTOM
    },
    scaleControl: false,
    styles: myStyles
  };

  var map = new google.maps.Map(document.getElementById("map-canvas"),
      myOptions);

  var infowindow = createInfoWindow(map);
  markOriginAndDestinations(map, infowindow);
}

// ajax call to get all possible destination airports, given the origin airport (set based on user's location), and then create map markers for each
function markOriginAndDestinations(map, infowindow) {
  console.log("making ajax request for origin airport and possible destinations");
  $.getJSON('ways#index', function(response) {
    var origin = response.origin;
    var airportsForMarking = response.airports;

    createOriginMarker(map, origin, infowindow);
    createStopoverMarkers(map, airportsForMarking, infowindow, origin);
  });
}

// create marker for origin airport (closest to user's location)
function createOriginMarker(map, origin, infowindow) {
  console.log("setting origin marker");
  var latLng = new google.maps.LatLng(origin.latitude, origin.longitude);
  var marker = new google.maps.Marker({
      position: latLng,
      map: map,
      name: origin.name,
      iata: origin.iata,
      city: origin.city,
      country: origin.country_name,
      icon: 'http://maps.google.com/mapfiles/kml/pal3/icon53.png'
  });
  createInfoWindowListener(marker, map, infowindow);
}

// create one generic infowindow to be updated by event listener on each airport marker and set event listener to close it whenever user clicks elsewhere on the map
function createInfoWindow(map) {
  console.log("creating info window");
  var infowindow = new google.maps.InfoWindow();
  google.maps.event.addListener(map, 'click', function() {
    infowindow.close();
  });
  return infowindow;
}

// add listener to marker - when clicked, open infowindow
function createInfoWindowListener(marker, map, infowindow, origin) {
  console.log("creating listeners for each marker");
  google.maps.event.addListener(marker, 'click', function() {
    createRoutePath(map, marker, origin);
    openInfowindow(map, marker, infowindow);
    $("#destination-input").val(marker.id);
  });
}

// open infowindow
function openInfowindow(map, marker, infowindow) {
  infowindow.setContent( markerContent(marker) );
  infowindow.open(map, marker);
  styleInfowindow(infowindow);
}

function styleInfowindow(infowindow) {
  var infowindowDiv = $(".gm-style-iw").prev();
  infowindowDiv.addClass("style-infowindow");
  console.log("infowindow style - but not yet working");
}

// content string for infowindow
function markerContent(marker) {
  var contentString =
    marker.name+
    ' ('+
    marker.iata+
    ') ';
  return contentString;
}

// create markers for selection of airports sent from ways controller
function createStopoverMarkers(map, airportsForMarking, infowindow, origin) {
  console.log("creating stopover markers");
  for (var i = 0; i < airportsForMarking.length; i++) {
      (function(airport) {
          var latLng = new google.maps.LatLng(airport.latitude, airport.longitude);
          var marker = new google.maps.Marker({
              position: latLng,
              map: map,
              id: airport.id,
              name: airport.name,
              city: airport.city,
              iata: airport.iata,
              country: airport.country_name,
              icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=glyphish_airplane|FFFFFF'
          });
          createInfoWindowListener(marker, map, infowindow, origin);
      })(airportsForMarking[i]);
  };
}

function createRoutePath(map, marker, origin) {
  console.log(marker);
  console.log(origin);
  var flightPlanCoordinates = [
    new google.maps.LatLng(origin.latitude, origin.longitude),
    marker.position
  ];
  var flightPath = new google.maps.Polyline({
    path: flightPlanCoordinates,
    geodesic: true,
    strokeColor: '#FF0000',
    strokeOpacity: 1.0,
    strokeWeight: 2
  });

  flightPath.setMap(map);
}


// event listeners

setLocation();

$(document).ready(function() {
  console.log("document ready");
});

$(window).load(function () {
  console.log("window load");
  initializeMap();
});
