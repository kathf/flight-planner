//= require jquery
//= require jquery_ujs
//= require jquery-ui
//= require bootstrap
//= require turbolinks
//= require 'airports.js'
//= require_tree .



// send user's location to controller and calculate closest airport and set as @ways.origin
var setLocation = function () {
  console.log("location set");
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(function(position) {
      var cookie_val = position.coords.latitude + "|" + position.coords.longitude;
      document.cookie = "lat_lng=" + escape(cookie_val);
    });
  };
}

// initialize google map and call function to create marker for origin airport (closest to user's location)
function initializeMap(origin) {
  console.log("initializing map");

  var myStyles =
  [{"stylers":[{"visibility":"off"}]},{"featureType":"water","stylers":[{"visibility":"on"},{"hue":"#009999"}]},{"featureType":"landscape","stylers":[{"visibility":"on"},{"color":"#000000"}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"visibility":"on"},{"color":"#2f343b"},{"weight":1}]}]

  var myOptions = {
    center: new google.maps.LatLng(39, origin.longitude),
    zoom: 2,
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    minZoom: 1,
    maxZoom: 6,
    mapTypeControl: false,
    streetViewControl: false,
    panControl: false,
    zoomControl: true,
    zoomControlOptions: {
        style: google.maps.ZoomControlStyle.SMALL,
        position: google.maps.ControlPosition.LEFT_BOTTOM
    },
    scaleControl: false,
    styles: myStyles
  };

  map = new google.maps.Map(document.getElementById("map-canvas"),
      myOptions);
  return map;
}

// create marker for origin airport (closest to user's location)
function createOriginMarker(map, origin) {
  console.log("setting origin marker");
  var latLng = new google.maps.LatLng(origin.latitude, origin.longitude);
  var originMarker = new google.maps.Marker({
      position: latLng,
      map: map,
      name: origin.name,
      iata: origin.iata,
      city: origin.city,
      country: origin.country_name,
      icon: 'http://maps.google.com/mapfiles/kml/pal3/icon53.png'
  });
  return originMarker;
}

// create one generic infowindow to be updated by event listener on each airport marker and set event listener to close it whenever user clicks elsewhere on the map
function createInfoWindow(map) {
  console.log("creating info window");
  infowindow = new google.maps.InfoWindow();
  google.maps.event.addListener(map, 'mouseover', function() {
    infowindow.close();
  });
  return infowindow;
}

function createFlightPath(map) {
  flightPath = new google.maps.Polyline({
    map: map,
    geodesic: true,
    strokeColor: '#FF0000',
    strokeOpacity: 1.0,
    strokeWeight: 2
  });
  google.maps.event.addListener(map, 'mouseover', function() {
    flightPath.setVisible(false);
  });
  return flightPath;
}

// open infowindow
function openInfowindow(map, marker, infowindow) {
  infowindow.setContent( markerContent(marker) );
  infowindow.open(map, marker);
  styleInfowindow(infowindow);
}

function styleInfowindow(infowindow) {
  console.log("infowindow to be styled TODO");
  var elementsToStyle = $(".gm-style-iw").prev().children();
  $(".gm-style-iw").next().detach();
  elementsToStyle.css("border-radius", "25px");
}

// content string for infowindow
function markerContent(marker) {
  var contentString =
    marker.name+
    ' ('+
    marker.iata+
    ') ';
  return contentString;
}

// create markers for selection of airports sent from ways controller
function createStopoverMarkers(map, destinationsToMark, infowindow, origin, flightPath) {
  console.log("creating stopover markers");
  for (var i = 0; i < destinationsToMark.length; i++) {
      (function(airport) {
          var latLng = new google.maps.LatLng(airport.latitude, airport.longitude);
          var marker = new google.maps.Marker({
              position: latLng,
              map: map,
              id: airport.id,
              name: airport.name,
              city: airport.city,
              iata: airport.iata,
              country: airport.country_name,
              icon: 'http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=glyphish_airplane|FFFFFF'
          });
          createMarkerListeners(marker, map, infowindow, origin, flightPath);
      })(destinationsToMark[i]);
  };
}

// add listener to marker - when clicked, open infowindow
function createMarkerListeners(marker, map, infowindow, origin, flightPath) {
  console.log("creating listeners for each marker");
  google.maps.event.addListener(marker, 'mouseover', function() {
    setFlightPathCoords(flightPath, origin, marker);
    openInfowindow(map, marker, infowindow);
  });
  google.maps.event.addListener(marker, 'click', function() {
    $("#destination-name").val(marker.name);
    $("#destination-id").val(marker.id);
    // $(".edit_way").submit();
  });
}

function setFlightPathCoords(flightPath, origin, marker) {
  flightPath.setVisible(true);
  var flightPlanCoordinates = [
    new google.maps.LatLng(origin.latitude, origin.longitude),
    marker.position
  ];
  flightPath.setPath(flightPlanCoordinates);
}

function formSetUp( element ) {
  $( element ).focusin(function() {
    var presentValue = this.value;
    this.value = '';
    $( element ).focusout(function() {
      if (this.value == "") {
        this.value = presentValue;
      }
    });
  });
}

function autocomplete(input) {
  var nameInput = "#" + input + "-name"
  var idInput = "#" + input + "-id"
  $( nameInput ).autocomplete({
    minLength: 2,
    source: "/airports.json",
    select: function(event, ui) {
      $( nameInput ).val(ui.item.name);
      $( idInput ).val(ui.item.id);
      return false;
      }
    })
    .data( "uiAutocomplete" )._renderItem = function( ul, item ) {
    return $( "<li></li>" )
        .data( "item.autocomplete", item )
        .append( "<a>" + item.name + "</a>" )
        .appendTo( ul );
    };
}


function formSubmit() {
  alert("btn clicked");
  $("#origin-name").attr('disabled', 'true');
  $("#destination-name").attr('disabled', 'true');
  $('.edit_way').submit();
}

function revertForm() {
  alert("form reverted");
  $("#origin-name").removeAttr('disabled');
  $("#destination-name").removeAttr('disabled');
}

//////////// event listeners ///////////////

setLocation();

$(window).load(function () {
  console.log("window load");

  formSetUp("#origin-name");
  formSetUp("#destination-name");
  autocomplete("origin");
  autocomplete("destination");

  $("#btn-submit").click( function(event) {
    event.preventDefault();
    formSubmit();
    revertForm();
  });

  var origin;
  var map;
  var destinationsToMark;

  $.getJSON("/ways/set_location.json", function(data) {
        origin = data.origin;
        map = initializeMap(origin);
        createOriginMarker(map, origin);

        $.getJSON("/ways.json", function(data) {
            destinationsToMark = data.destinations;
            var infowindow = createInfoWindow(map);
            var flightPath = createFlightPath(map);
            createStopoverMarkers(map, destinationsToMark, infowindow, origin, flightPath);
          }
        );
      }
  );
});
